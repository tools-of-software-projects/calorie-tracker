{"version":3,"sources":["components/Nav.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Nav","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","id","className","Link","title","Item","Divider","eventKey","Form","Group","controlId","Label","Control","type","placeholder","App","state","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yTAGe,SAASA,IACtB,OACE,kBAAC,IAAD,CACEC,kBAAgB,EAChBC,OAAO,KACPC,GAAG,OACHC,QAAQ,QAER,kBAAC,IAAsBC,MAAvB,CAA6BC,KAAK,SAAlC,mBAGA,kBAAC,IAAsBC,OAAvB,CAA8BC,gBAAc,0BAC5C,kBAAC,IAAsBC,SAAvB,CAAgCC,GAAG,yBACjC,kBAAC,IAAD,CAAoBC,UAAU,WAC5B,kBAAC,IAAmBC,KAApB,CAAyBN,KAAK,aAA9B,SAMA,kBAAC,IAAD,CACEO,MAAM,UACNH,GAAG,2BAEH,kBAAC,IAA2BI,KAA5B,CAAiCR,KAAK,eAAtC,aAGA,kBAAC,IAA2BQ,KAA5B,CAAiCR,KAAK,eAAtC,aAGA,kBAAC,IAA2BQ,KAA5B,CAAiCR,KAAK,eAAtC,aAGA,kBAAC,IAA2BS,QAA5B,MACA,kBAAC,IAA2BD,KAA5B,CAAiCR,KAAK,eAAtC,eAKJ,kBAAC,IAAD,KACE,kBAAC,IAAmBM,KAApB,CAAyBI,SAAU,EAAGV,KAAK,UAA3C,e,oBCzCK,SAASW,IACtB,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAoBC,MAArB,CAA2BC,UAAU,kBACnC,kBAAC,IAAoBC,MAArB,mBACA,kBAAC,IAAoBC,QAArB,CACEC,KAAK,OACLC,YAAY,gBAchB,kBAAC,IAAD,CAAuBnB,QAAQ,UAAUkB,KAAK,UAA9C,W,UCAOE,E,YAnBb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,GAFD,E,sEAKZ,OACE,yBAAKd,UAAU,OACb,kBAAC,EAAD,MACA,4BAAQA,UAAU,cAChB,kCACM,uCADN,iDACoE,KAEpE,kBAAC,EAAD,Y,GAbQe,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.846de68b.chunk.js","sourcesContent":["import React from \"react\";\nimport * as ReactBootstrap from \"react-bootstrap\";\n\nexport default function Nav() {\n  return (\n    <ReactBootstrap.Navbar\n      collapseOnSelect\n      expand=\"md\"\n      bg=\"dark\"\n      variant=\"dark\"\n    >\n      <ReactBootstrap.Navbar.Brand href=\"#home\">\n        Calorie Counter\n      </ReactBootstrap.Navbar.Brand>\n      <ReactBootstrap.Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n      <ReactBootstrap.Navbar.Collapse id=\"responsive-navbar-nav\">\n        <ReactBootstrap.Nav className=\"mr-auto\">\n          <ReactBootstrap.Nav.Link href=\"#features\">\n            About\n          </ReactBootstrap.Nav.Link>\n          {/* <ReactBootstrap.Nav.Link href=\"#pricing\">\n            Pricing\n          </ReactBootstrap.Nav.Link> */}\n          <ReactBootstrap.NavDropdown\n            title=\"Profile\"\n            id=\"collasible-nav-dropdown\"\n          >\n            <ReactBootstrap.NavDropdown.Item href=\"#action/3.1\">\n              coming up\n            </ReactBootstrap.NavDropdown.Item>\n            <ReactBootstrap.NavDropdown.Item href=\"#action/3.2\">\n              coming up\n            </ReactBootstrap.NavDropdown.Item>\n            <ReactBootstrap.NavDropdown.Item href=\"#action/3.3\">\n              coming up\n            </ReactBootstrap.NavDropdown.Item>\n            <ReactBootstrap.NavDropdown.Divider />\n            <ReactBootstrap.NavDropdown.Item href=\"#action/3.4\">\n              coming up\n            </ReactBootstrap.NavDropdown.Item>\n          </ReactBootstrap.NavDropdown>\n        </ReactBootstrap.Nav>\n        <ReactBootstrap.Nav>\n          <ReactBootstrap.Nav.Link eventKey={2} href=\"#memes\">\n            Sign out\n          </ReactBootstrap.Nav.Link>\n        </ReactBootstrap.Nav>\n      </ReactBootstrap.Navbar.Collapse>\n    </ReactBootstrap.Navbar>\n  );\n}\n","import React from \"react\";\nimport * as ReactBootstrap from \"react-bootstrap\";\nexport default function Form() {\n  return (\n    <div>\n      <ReactBootstrap.Form>\n        <ReactBootstrap.Form.Group controlId=\"formBasicEmail\">\n          <ReactBootstrap.Form.Label>Food name:</ReactBootstrap.Form.Label>\n          <ReactBootstrap.Form.Control\n            type=\"text\"\n            placeholder=\"e.g banana\"\n          />\n          {/* <ReactBootstrap.Form.Text className=\"text-muted\">\n                We'll never share your email with anyone else.\n            </ReactBootstrap.Form.Text> */}\n        </ReactBootstrap.Form.Group>\n\n        {/* <ReactBootstrap.Form.Group controlId=\"formBasicPassword\">\n          <ReactBootstrap.Form.Label>Password</ReactBootstrap.Form.Label>\n          <ReactBootstrap.Form.Control type=\"password\" placeholder=\"Password\" />\n        </ReactBootstrap.Form.Group>\n        <ReactBootstrap.Form.Group controlId=\"formBasicCheckbox\">\n          <ReactBootstrap.Form.Check type=\"checkbox\" label=\"Check me out\" />\n        </ReactBootstrap.Form.Group> */}\n        <ReactBootstrap.Button variant=\"primary\" type=\"submit\">\n          Track\n        </ReactBootstrap.Button>\n      </ReactBootstrap.Form>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Nav from \"./components/Nav\";\nimport Form from \"./components/Form\";\nimport \"./App.css\";\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {};\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Nav />\n        <header className=\"App-header\">\n          <p>\n            Hey <b>[user], </b>here is how to track your calorie consumption:{\" \"}\n          </p>\n          <Form />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}